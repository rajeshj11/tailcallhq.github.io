"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[626],{7841:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=t(4848),o=t(8453);const l={title:"Integrating Tailcall with Apollo Studio",description:"Enhance your GraphQL server's efficiency by integrating Tailcall with Apollo Studio using our concise guide. Learn how to configure Tailcall to send vital usage metrics to Apollo Studio for advanced performance monitoring and optimization. Whether you're establishing a Monolith graph or improving an existing one, our instructions facilitate seamless integration. Set up for better insights and leverage Apollo Studio's features for a more responsive GraphQL server. Start optimizing today with our straightforward steps and explore Apollo Studio's free trial for new users.",slug:"integrate-apollo-studio-graphql-tailcall",sidebar_label:"Apollo Studio",publish:!0},r=void 0,s={id:"apollo-studio",title:"Integrating Tailcall with Apollo Studio",description:"Enhance your GraphQL server's efficiency by integrating Tailcall with Apollo Studio using our concise guide. Learn how to configure Tailcall to send vital usage metrics to Apollo Studio for advanced performance monitoring and optimization. Whether you're establishing a Monolith graph or improving an existing one, our instructions facilitate seamless integration. Set up for better insights and leverage Apollo Studio's features for a more responsive GraphQL server. Start optimizing today with our straightforward steps and explore Apollo Studio's free trial for new users.",source:"@site/docs/apollo-studio.md",sourceDirName:".",slug:"/integrate-apollo-studio-graphql-tailcall",permalink:"/docs/integrate-apollo-studio-graphql-tailcall",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/apollo-studio.md",tags:[],version:"current",lastUpdatedAt:172014767e4,frontMatter:{title:"Integrating Tailcall with Apollo Studio",description:"Enhance your GraphQL server's efficiency by integrating Tailcall with Apollo Studio using our concise guide. Learn how to configure Tailcall to send vital usage metrics to Apollo Studio for advanced performance monitoring and optimization. Whether you're establishing a Monolith graph or improving an existing one, our instructions facilitate seamless integration. Set up for better insights and leverage Apollo Studio's features for a more responsive GraphQL server. Start optimizing today with our straightforward steps and explore Apollo Studio's free trial for new users.",slug:"integrate-apollo-studio-graphql-tailcall",sidebar_label:"Apollo Studio",publish:!0},sidebar:"docs",previous:{title:"Configuration Formats",permalink:"/docs/tailcall-graphql-configuration-format-conversion"},next:{title:"Data Dog",permalink:"/docs/graphql-data-dog-telemetry-tailcall"}},a={},c=[{value:"Creating a monolith graph",id:"creating-a-monolith-graph",level:2},{value:"Checking the metrics in Apollo Studio",id:"checking-the-metrics-in-apollo-studio",level:2}];function d(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:["This guide illustrates how to configure ",(0,n.jsx)(i.code,{children:"tailcall"})," to send usage metrics to ",(0,n.jsx)(i.a,{href:"https://studio.apollographql.com",children:"Apollo Studio"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"creating-a-monolith-graph",children:"Creating a monolith graph"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["Before you configure ",(0,n.jsx)(i.code,{children:"tailcall"}),", you will need to create a ",(0,n.jsx)(i.code,{children:"Monolith"})," graph on Apollo Studio."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"home.png",src:t(9732).A+"",width:"1512",height:"859"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["Go to your organization's home page and click on ",(0,n.jsx)(i.code,{children:"Create your first graph"}),", if this is your first graph or ",(0,n.jsx)(i.code,{children:"Create New Graph"})," if you have existing graphs."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"create-graph.png",src:t(3394).A+"",width:"1512",height:"859"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["Change the ",(0,n.jsx)(i.code,{children:"Graph title"}),", ",(0,n.jsx)(i.code,{children:"Graph ID"})," and other fields as desired and make sure to change ",(0,n.jsx)(i.code,{children:"Graph Architecture"})," to Monolith, assuming ",(0,n.jsx)(i.code,{children:"tailcall"})," is booted in monolith mode."]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["Once you are done, click on ",(0,n.jsx)(i.code,{children:"Next"}),". You'll see the following screen."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"insert-gql-schema.png",src:t(9561).A+"",width:"1512",height:"859"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["Copy the fields ",(0,n.jsx)(i.code,{children:"APOLLO_KEY"})," and ",(0,n.jsx)(i.code,{children:"APOLLO_GRAPH_REF"})," as they are required by ",(0,n.jsx)(i.code,{children:"tailcall"})," to be able to send the usage metrics."]}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"Next we need to connect Apollo with our running instance of Tailcall. There are two ways to let Apollo know about your GraphQL schema:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["Navigate to ",(0,n.jsx)(i.code,{children:"Local Introspection"}),". If you have a deployed instance of your GraphQL server you can put the URL pointing to that in ",(0,n.jsx)(i.code,{children:"Endpoint URL"})," and click on ",(0,n.jsx)(i.code,{children:"Introspect and Upload"}),". If not, start a local instance of ",(0,n.jsx)(i.code,{children:"tailcall"})," and put the local url here, similar to how is shown in the image below. You can start a local instance of Tailcall by running ",(0,n.jsx)(i.code,{children:"tailcall start"})," (click ",(0,n.jsx)(i.a,{href:"/docs/tailcall-graphql-cli",children:"here"})," to know more)."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"local-introspection.png",src:t(2890).A+"",width:"1512",height:"859"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["Or, Navigate to ",(0,n.jsx)(i.code,{children:"Local Schema"})," and insert your schema generated by ",(0,n.jsx)(i.code,{children:"tailcall"})," and click ",(0,n.jsx)(i.code,{children:"Upload"}),". You can get the schema by running ",(0,n.jsx)(i.code,{children:"tailcall check"})," (click ",(0,n.jsx)(i.a,{href:"/docs/tailcall-graphql-cli",children:"here"})," to know more)."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"local-schema.png",src:t(5630).A+"",width:"1512",height:"858"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["You have now created a Monolith graph in Apollo Studio. The next step is to configure ",(0,n.jsx)(i.code,{children:"tailcall"})," to use the ",(0,n.jsx)(i.code,{children:"APOLLO_API_KEY"})," and ",(0,n.jsx)(i.code,{children:"APOLLO_GRAPH_REF"}),". Follow detailed instructions ",(0,n.jsx)(i.a,{href:"/docs/tailcall-dsl-graphql-custom-directives#telemetry-directive",children:"here"}),"."]}),"\n",(0,n.jsx)(i.h2,{id:"checking-the-metrics-in-apollo-studio",children:"Checking the metrics in Apollo Studio"}),"\n",(0,n.jsx)(i.p,{children:"To see the metrics for you queries follow these instructions:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["Start ",(0,n.jsx)(i.code,{children:"tailcall"})," with the appropriate configuration for Apollo (click ",(0,n.jsx)(i.a,{href:"/docs/tailcall-graphql-cli#start",children:"here"})," to know more). Below is an example of what a config may look like:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-graphql",children:'schema\n  @server(port: 8000)\n  @upstream(\n    baseURL: "http://jsonplaceholder.typicode.com"\n  )\n  @telemetry(\n    export: {\n      apollo: {\n        apiKey: "<APOLLO_API_KEY from Apollo Website>"\n        graphRef: "<APOLLO_GRAPH_REF from Apollo Website>"\n      }\n    }\n  ) {\n  query: Query\n}\n\ntype Query {\n  posts: [Post] @http(path: "/posts")\n}\n\ntype Post {\n  id: Int!\n  userId: Int!\n  title: String!\n  body: String!\n}\n'})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["Visit ",(0,n.jsx)(i.code,{children:"http://localhost:8000/graphql"})," and create a query with an appropriate name (below is an example query named ",(0,n.jsx)(i.code,{children:"MyQuery"}),") and run it multiple times to send the metrics to Apollo Studio."]}),"\n",(0,n.jsx)(i.admonition,{type:"tip",children:(0,n.jsx)(i.p,{children:"Naming the query is not required to be able to send the metrics, but it helps to organize the metrics with appropriate names when viewed in Apollo Studio."})}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-graphql",children:"query MyQuery {\n  posts {\n    id\n    title\n  }\n}\n"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsxs)(i.p,{children:["To see the metrics click on the ",(0,n.jsx)(i.code,{children:"VARIANT NAME"})," of your graph. In the example below, the variant name is ",(0,n.jsx)(i.code,{children:"current"}),"."]}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"graph-home.png",src:t(5889).A+"",width:"1512",height:"858"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"You will see the following page. From here click on insights icon as highlighted on the left side of the image."}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"insights-nav.png",src:t(334).A+"",width:"1512",height:"859"})}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"You will now be able to see all the information related to your queries here"}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"insights.png",src:t(3150).A+"",width:"1512",height:"858"})}),"\n",(0,n.jsx)(i.p,{children:(0,n.jsx)(i.img,{alt:"insights-graph.png",src:t(7521).A+"",width:"1512",height:"858"})}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(i.admonition,{type:"important",children:(0,n.jsx)(i.p,{children:"If you don't see the name of your query here, try running the query multiple times and waiting for some time. Since the metric isn't sent to Apollo Studio for each query, instead they are batched together and sent at once for efficiency reasons."})})]})}function h(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},3394:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/create-graph-892b392dcd3a45324ee1ed4e1f6308e9.png"},5889:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/graph-home-d178d98e3c2a411742976f88d024fbc8.png"},9732:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/home-ada6303c27e51080da6a6062f4c5d344.png"},9561:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/insert-gql-schema-0166976f93d19777515be63d501a3e2a.png"},7521:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/insights-graph-95cb953964c9911c79c8468f75319ab3.png"},334:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/insights-nav-75aaccd68308dd407bd65666bdbb4048.png"},3150:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/insights-ae5962b534a5bb30e7e2e437c1dbe4ac.png"},2890:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/local-introspection-329da83b7aab8007b57dfa9d691b85c2.png"},5630:(e,i,t)=>{t.d(i,{A:()=>n});const n=t.p+"assets/images/local-schema-260d71dcc1770dca21bdbb6cc920e683.png"},8453:(e,i,t)=>{t.d(i,{R:()=>r,x:()=>s});var n=t(6540);const o={},l=n.createContext(o);function r(e){const i=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(l.Provider,{value:i},e.children)}}}]);